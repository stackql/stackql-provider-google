export const resourceNameOverridesByOperationId = {
    aiplatform: {
        'aiplatform.projects.locations.metadataStores.contexts.queryContextLineageSubgraph': 'context_lineage_subgraph',
        'aiplatform.projects.locations.metadataStores.contexts.addContextArtifactsAndExecutions': 'contexts',
        'aiplatform.projects.locations.metadataStores.contexts.addContextChildren': 'contexts',
        'aiplatform.projects.locations.metadataStores.contexts.removeContextChildren': 'contexts',
        'aiplatform.endpoints.fetchPredictOperation': 'endpoints',
        'aiplatform.projects.locations.featurestores.entityTypes.deleteFeatureValues': 'entity_types',
        'aiplatform.projects.locations.metadataStores.executions.queryExecutionInputsAndOutputs': 'execution_lineage_subgraph',
        'aiplatform.projects.locations.metadataStores.executions.addExecutionEvents': 'executions',
        'aiplatform.projects.locations.featureOnlineStores.featureViews.fetchFeatureValues': 'feature_views',
        'aiplatform.projects.locations.indexes.removeDatapoints': 'indexes',
        'aiplatform.projects.locations.models.updateExplanationDataset': 'models',
        'aiplatform.publishers.models.fetchPredictOperation': 'models',
        'aiplatform.projects.locations.models.deleteVersion': 'model_versions',
        'aiplatform.projects.locations.ragCorpora.ragFiles.operations.delete': 'rag_file_operations',
        'aiplatform.projects.locations.ragCorpora.ragFiles.operations.cancel': 'rag_file_operations',
        'aiplatform.projects.locations.ragCorpora.ragFiles.operations.wait': 'rag_file_operations',
        'aiplatform.projects.locations.ragCorpora.ragFiles.operations.list': 'rag_file_operations',
        'aiplatform.projects.locations.ragCorpora.ragFiles.operations.get': 'rag_file_operations',
        'aiplatform.projects.locations.featureGroups.features.operations.listWait': 'feature_group_operations',
        'aiplatform.media.upload': 'rag_files',
        'aiplatform.projects.locations.studies.trials.listOptimalTrials': 'optimal_trials',
        'aiplatform.projects.locations.studies.trials.addTrialMeasurement': 'trials',
    },
    apigee: {
        'apigee.organizations.appgroups.apps.keys.apiproducts.updateAppGroupAppKeyApiProduct': 'apiproducts',
        'apigee.organizations.apiproducts.attributes.updateApiProductAttribute': 'attributes',
        'apigee.organizations.developers.apps.attributes.updateDeveloperAppAttribute': 'attributes',
        'apigee.organizations.developers.attributes.updateDeveloperAttribute': 'attributes',
        'apigee.organizations.environments.apis.revisions.debugsessions.deleteData': 'debugsession_data',
        'apigee.organizations.environments.apis.revisions.debugsessions.data.get': 'debugsession_data',
        'apigee.organizations.developers.apps.keys.apiproducts.delete': 'keys',
        'apigee.organizations.developers.apps.keys.apiproducts.updateDeveloperAppKeyApiProduct': 'keys',
        'apigee.organizations.developers.apps.keys.create.create': 'keys',
        'apigee.organizations.getDeployedIngressConfig': 'ingress_config',
        'apigee.organizations.envgroups.getDeployedIngressConfig': 'envgroup_config',
        'apigee.organizations.environments.getAddonsConfig': 'addons_config',
        'apigee.organizations.environments.getApiSecurityRuntimeConfig': 'api_security_runtime_config',
        'apigee.organizations.environments.getDeployedConfig': 'environment_config',
        'apigee.organizations.environments.updateEnvironment': 'environments',
        'apigee.organizations.environments.getSecurityActionsConfig': 'security_actions_config',
        'apigee.organizations.environments.updateSecurityActionsConfig': 'security_actions_config',
        'apigee.organizations.appgroups.apps.keys.updateAppGroupAppKey': 'keys',
        'apigee.organizations.developers.apps.keys.updateDeveloperAppKey': 'keys',
        'apigee.organizations.optimizedHostStats.get': 'optimized_stats',
        'apigee.projects.provisionOrganization': 'organizations',
        'apigee.organizations.environments.resourcefiles.listEnvironmentResources': 'resourcefiles',
        'apigee.organizations.securityAssessmentResults.batchCompute': 'organizations',
        'apigee.organizations.appgroups.apps.keys.apiproducts.delete': 'apiproducts',
        'apigee.organizations.appgroups.apps.keys.apiproducts.updateAppGroupAppKeyApiProduct': 'apiproducts',
    },
    apigeeregistry: {
        'apigeeregistry.projects.locations.apis.deployments.deleteRevision': 'deployment_revisions',
        'apigeeregistry.projects.locations.apis.deployments.listRevisions': 'deployment_revisions',
        'apigeeregistry.projects.locations.apis.versions.specs.deleteRevision': 'spec_revisions',
        'apigeeregistry.projects.locations.apis.versions.specs.listRevisions': 'spec_revisions',
    },
    apikeys: {
        'apikeys.projects.locations.keys.getKeyString': 'key_strings',
    },
    apim: {
        'apim.projects.locations.getEntitlement': 'entitlements',
    },
    appengine: {
        'appengine.projects.locations.applications.patch': 'apps',
        'appengine.apps.listRuntimes': 'runtimes',
    },
    backupdr: {
        'backupdr.projects.locations.backupPlanAssociations.fetchForResourceType': 'backup_plan_associations',
        'backupdr.projects.locations.dataSourceReferences.fetchForResourceType': 'data_source_references',
        'backupdr.projects.locations.backupVaults.dataSources.fetchAccessToken': 'data_sources',
        'backupdr.projects.locations.serviceConfig.initialize': 'operations',
    },
    baremetalsolution: {
        'baremetalsolution.projects.locations.networks.listNetworkUsage': 'network_usage',
    },
    batch: {
        'batch.projects.locations.state.report': 'agent_state_report',
    },
    bigquery: {
        'bigquery.jobs.getQueryResults': 'query_results',
    },
    bigquerydatatransfer: {
        'bigquerydatatransfer.projects.enrollDataSources': 'data_sources',
    },
    binaryauthorization: {
        'binaryauthorization.projects.updatePolicy': 'policies',
        'binaryauthorization.projects.getPolicy': 'policies',
        'binaryauthorization.systemPolicy.getPolicy': 'system_policy',
    },
    cloudasset: {
        'cloudasset.queryAssets': 'assets',
        'cloudasset.analyzeMove': 'assets',
        'cloudasset.analyzeOrgPolicyGovernedAssets': 'assets',
        'cloudasset.batchGetAssetsHistory': 'asset_history',
        'cloudasset.effectiveIamPolicies.batchGet': 'cloudasset_iam_policies',
    },
    cloudbuild: {
        'cloudbuild.projects.locations.connections.fetchLinkableRepositories': 'linkable_repositories',
    },
    cloudcontrolspartner: {
        'cloudcontrolspartner.organizations.locations.customers.workloads.getEkmConnections': 'ekm_connections',
        'cloudcontrolspartner.organizations.locations.customers.workloads.getPartnerPermissions': 'partner_permissions',
    },
    cloudkms: {
        'cloudkms.projects.locations.keyRings.cryptoKeys.updatePrimaryVersion': 'crypto_keys',
    },
    cloudprofiler: {
        'cloudprofiler.projects.profiles.createOffline': 'profiles',
    },
    cloudshell: {
        'cloudshell.users.environments.removePublicKey': 'public_keys',
        'cloudshell.users.environments.addPublicKey': 'public_keys',
    },
    cloudsupport: {
        'cloudsupport.caseClassifications.search': 'cases',
    },
    cloudtrace: {
        'cloudtrace.projects.traces.spans.createSpan': 'spans',
    },
    composer: {
        'composer.projects.locations.environments.fetchDatabaseProperties': 'database_properties',
    },
    compute: {
        'compute.securityPolicies.aggregatedList' : 'security_policies_aggregated',
        'compute.backendServices.aggregatedList' : 'backend_services_aggregated',
        'compute.healthChecks.aggregatedList' : 'health_checks_aggregated',
        'compute.sslCertificates.aggregatedList' : 'ssl_certificates_aggregated',
        'compute.urlMaps.aggregatedList' : 'url_maps_aggregated',
        'compute.targetHttpProxies.aggregatedList' : 'target_http_proxies_aggregated',
        'compute.globalOperations.aggregatedList' : 'global_operations_aggregated',
        'compute.targetHttpsProxies.aggregatedList' : 'target_https_proxies_aggregated',
        'compute.targetTcpProxies.aggregatedList' : 'target_tcp_proxies_aggregated',
        'compute.sslPolicies.aggregatedList' : 'ssl_policies_aggregated', 
        'compute.instanceTemplates.aggregatedList' : 'instance_templates_aggregated',   
        'compute.globalOperations.list': 'operations',
        'compute.globalOperations.get': 'operations',
        'compute.globalOperations.delete': 'operations',
        'compute.globalOperations.wait': 'operations',
        'compute.globalOperations.aggregatedList': 'operations_aggregated',
        'compute.globalOrganizationOperations.list': 'operations',
        'compute.globalOrganizationOperations.get': 'operations',
        'compute.globalOrganizationOperations.delete': 'operations',
        'compute.zoneOperations.list': 'operations',
        'compute.zoneOperations.get': 'operations',
        'compute.zoneOperations.delete': 'operations',
        'compute.zoneOperations.wait': 'operations',
        'compute.regionOperations.list': 'operations',
        'compute.regionOperations.get': 'operations',
        'compute.regionOperations.delete': 'operations',
        'compute.regionOperations.wait': 'operations',
        'compute.globalAddresses.list': 'addresses',
        'compute.globalAddresses.get': 'addresses',
        'compute.globalAddresses.insert': 'addresses',
        'compute.globalAddresses.delete': 'addresses',
        'compute.globalAddresses.move': 'addresses',
        'compute.globalAddresses.setLabels': 'addresses',
        'compute.images.getFromFamily': 'images',
        'compute.regionDisks.list': 'disks',
        'compute.regionDisks.get': 'disks',
        'compute.regionDisks.delete': 'disks',
        'compute.regionDisks.update': 'disks',
        'compute.regionDisks.insert': 'disks',
        'compute.regionDisks.bulkInsert': 'disks',
        'compute.regionDisks.setLabels': 'disks',
        'compute.regionDisks.resize': 'disks',
        'compute.regionDisks.startAsyncReplication': 'disks',
        'compute.regionDisks.stopAsyncReplication': 'disks',
        'compute.regionDisks.stopGroupAsyncReplication': 'disks',
        'compute.regionDisks.getIamPolicy': 'disks_iam_policies',
        'compute.regionDisks.setIamPolicy': 'disks_iam_policies',
        'compute.regionDisks.testIamPermissions': 'disks_iam_policies',
        'compute.regionDisks.addResourcePolicies': 'disks_resource_policies',
        'compute.regionDisks.removeResourcePolicies': 'disks_resource_policies',
        'compute.networkFirewallPolicies.list': 'firewall_policies',
        'compute.networkFirewallPolicies.get': 'firewall_policies',
        'compute.networkFirewallPolicies.aggregatedList': 'skip_this_resource',
        'compute.regionNetworkFirewallPolicies.list': 'firewall_policies',
        'compute.regionNetworkFirewallPolicies.get': 'firewall_policies',
        'compute.networkFirewallPolicies.insert': 'firewall_policies',
        'compute.regionNetworkFirewallPolicies.insert': 'firewall_policies',
        'compute.networkFirewallPolicies.delete': 'firewall_policies',
        'compute.regionNetworkFirewallPolicies.delete': 'firewall_policies',
        'compute.networkFirewallPolicies.patch': 'firewall_policies',
        'compute.regionNetworkFirewallPolicies.patch': 'firewall_policies',
        'compute.networkFirewallPolicies.cloneRules': 'firewall_policies',
        'compute.regionNetworkFirewallPolicies.cloneRules': 'firewall_policies',
        'compute.firewallPolicies.patchRule': 'firewall_policies_rule',
        'compute.networkFirewallPolicies.getRule': 'firewall_policies_rule',
        'compute.networkFirewallPolicies.addRule': 'firewall_policies_rule',
        'compute.networkFirewallPolicies.removeRule': 'firewall_policies_rule',
        'compute.networkFirewallPolicies.patchRule': 'firewall_policies_rule',
        'compute.regionNetworkFirewallPolicies.getRule': 'firewall_policies_rule',
        'compute.regionNetworkFirewallPolicies.addRule': 'firewall_policies_rule',
        'compute.regionNetworkFirewallPolicies.removeRule': 'firewall_policies_rule',
        'compute.regionNetworkFirewallPolicies.patchRule': 'firewall_policies_rule',
        'compute.firewallPolicies.cloneRules': 'firewall_policies_rule',
        'compute.networkFirewallPolicies.patchPacketMirroringRule': 'packet_mirroring_rule',
        'compute.networkFirewallPolicies.getPacketMirroringRule': 'packet_mirroring_rule',
        'compute.networkFirewallPolicies.addPacketMirroringRule': 'packet_mirroring_rule',
        'compute.networkFirewallPolicies.removePacketMirroringRule': 'packet_mirroring_rule',
        'compute.firewallPolicies.addAssociation': 'firewall_policies_associations',
        'compute.firewallPolicies.removeAssociation': 'firewall_policies_associations',
        'compute.firewallPolicies.getAssociation': 'firewall_policies_associations',
        'compute.networkFirewallPolicies.addAssociation': 'firewall_policies_associations',
        'compute.networkFirewallPolicies.removeAssociation': 'firewall_policies_associations',
        'compute.networkFirewallPolicies.getAssociation': 'firewall_policies_associations',
        'compute.regionNetworkFirewallPolicies.getAssociation': 'firewall_policies_associations',
        'compute.regionNetworkFirewallPolicies.addAssociation': 'firewall_policies_associations',
        'compute.regionNetworkFirewallPolicies.removeAssociation': 'firewall_policies_associations',
        'compute.networkFirewallPolicies.getIamPolicy': 'firewall_policies_iam_policies',
        'compute.networkFirewallPolicies.setIamPolicy': 'firewall_policies_iam_policies',
        'compute.networkFirewallPolicies.testIamPermissions': 'firewall_policies_iam_policies',
        'compute.regionNetworkFirewallPolicies.getIamPolicy': 'firewall_policies_iam_policies',
        'compute.regionNetworkFirewallPolicies.setIamPolicy': 'firewall_policies_iam_policies',
        'compute.regionNetworkFirewallPolicies.testIamPermissions': 'firewall_policies_iam_policies',
        'compute.regionNetworkFirewallPolicies.getEffectiveFirewalls': 'effective_firewalls',
        'compute.regionDisks.createSnapshot': 'disks_snapshot',
        'compute.regionSecurityPolicies.list': 'security_policies',
        'compute.regionSecurityPolicies.insert': 'security_policies',
        'compute.regionSecurityPolicies.get': 'security_policies',
        'compute.regionSecurityPolicies.delete': 'security_policies',
        'compute.regionSecurityPolicies.patch': 'security_policies',
        'compute.regionSecurityPolicies.patchRule': 'security_policies',
        'compute.regionSecurityPolicies.setLabels': 'security_policies',
        'compute.regionSecurityPolicies.getRule': 'security_policies_rule',
        'compute.regionSecurityPolicies.addRule': 'security_policies_rule',
        'compute.regionSecurityPolicies.removeRule': 'security_policies_rule',
        'compute.securityPolicies.listPreconfiguredExpressionSets': 'security_policies_expression_sets',
        'compute.instances.getEffectiveFirewalls': 'effective_firewalls',
        'compute.instances.updateDisplayDevice': 'instances',
        'compute.regionInstances.bulkInsert': 'instances',
        'compute.instances.getShieldedInstanceIdentity': 'shielded_instance_identity',
        'compute.instances.updateNetworkInterface': 'instances',
        'compute.instances.updateShieldedInstanceConfig': 'instances',
        'compute.regionInstanceGroups.list': 'instance_groups',
        'compute.regionInstanceGroups.get': 'instance_groups',
        'compute.regionInstanceGroups.setNamedPorts': 'instance_groups',
        'compute.regionInstanceGroups.listInstances': 'instance_groups_instances',
        'compute.regionInstanceGroupManagers.list': 'instance_group_managers',
        'compute.regionInstanceGroupManagers.insert': 'instance_group_managers',
        'compute.regionInstanceGroupManagers.get': 'instance_group_managers',
        'compute.regionInstanceGroupManagers.patch': 'instance_group_managers',
        'compute.regionInstanceGroupManagers.delete': 'instance_group_managers',
        'compute.regionInstanceGroupManagers.suspendInstances': 'instance_group_managers',
        'compute.regionInstanceGroupManagers.resumeInstances': 'instance_group_managers',
        'compute.regionInstanceGroupManagers.stopInstances': 'instance_group_managers',
        'compute.regionInstanceGroupManagers.startInstances': 'instance_group_managers',
        'compute.regionInstanceGroupManagers.abandonInstances': 'instance_group_managers',
        'compute.regionInstanceGroupManagers.recreateInstances': 'instance_group_managers',
        'compute.regionInstanceGroupManagers.resize': 'instance_group_managers',
        'compute.regionInstanceGroupManagers.setInstanceTemplate': 'instance_group_managers',
        'compute.regionInstanceGroupManagers.setTargetPools': 'instance_group_managers',
        'compute.regionInstanceGroupManagers.patchPerInstanceConfigs': 'instance_group_managers',
        'compute.regionInstanceGroupManagers.applyUpdatesToInstances': 'instance_group_managers',
        'compute.regionInstanceGroupManagers.deleteInstances': 'instance_group_managers_instances',
        'compute.regionInstanceGroupManagers.createInstances': 'instance_group_managers_instances',
        'compute.instanceGroupManagers.listManagedInstances': 'instance_group_managers_instances',
        'compute.regionInstanceGroupManagers.listManagedInstances': 'instance_group_managers_instances',
        'compute.regionInstanceGroupManagers.listErrors': 'instance_group_managers_errors',
        'compute.regionInstanceGroupManagers.listPerInstanceConfigs': 'instance_group_managers_per_instance_configs',
        'compute.regionInstanceGroupManagers.updatePerInstanceConfigs': 'instance_group_managers_per_instance_configs',
        'compute.regionInstanceGroupManagers.deletePerInstanceConfigs': 'instance_group_managers_per_instance_configs',
        'compute.regionAutoscalers.list': 'autoscalers',
        'compute.regionAutoscalers.insert': 'autoscalers',
        'compute.regionAutoscalers.update': 'autoscalers',
        'compute.regionAutoscalers.patch': 'autoscalers',
        'compute.regionAutoscalers.get': 'autoscalers',
        'compute.regionAutoscalers.delete': 'autoscalers',
        'compute.backendBuckets.addSignedUrlKey': 'backend_buckets',
        'compute.backendBuckets.deleteSignedUrlKey': 'backend_buckets',
        'compute.regionBackendServices.list': 'backend_services',
        'compute.regionBackendServices.insert': 'backend_services',
        'compute.regionBackendServices.get': 'backend_services',
        'compute.regionBackendServices.delete': 'backend_services',
        'compute.regionBackendServices.update': 'backend_services',
        'compute.regionBackendServices.patch': 'backend_services',
        'compute.regionBackendServices.setSecurityPolicy': 'backend_services',
        'compute.regionBackendServices.listUsable': 'backend_services_usable',
        'compute.regionBackendServices.getHealth': 'backend_services_health',
        'compute.backendServices.addSignedUrlKey': 'backend_services',
        'compute.backendServices.deleteSignedUrlKey': 'backend_services',
        'compute.regionBackendServices.getIamPolicy': 'backend_services_iam_policies',
        'compute.regionBackendServices.setIamPolicy': 'backend_services_iam_policies',
        'compute.regionBackendServices.testIamPermissions': 'backend_services_iam_policies',
        'compute.regionCommitments.list': 'commitments',
        'compute.regionCommitments.insert': 'commitments',
        'compute.regionCommitments.aggregatedList': 'commitments',
        'compute.regionCommitments.get': 'commitments',
        'compute.regionCommitments.update': 'commitments',
        'compute.regionDiskTypes.list': 'disk_types',
        'compute.regionDiskTypes.get': 'disk_types',
        'compute.interconnectGroups.createMembers': 'interconnect_groups',
        'compute.globalForwardingRules.list': 'forwarding_rules',
        'compute.globalForwardingRules.insert': 'forwarding_rules',
        'compute.globalForwardingRules.get': 'forwarding_rules',
        'compute.globalForwardingRules.delete': 'forwarding_rules',
        'compute.globalForwardingRules.patch': 'forwarding_rules',
        'compute.globalForwardingRules.setTarget': 'forwarding_rules',
        'compute.globalForwardingRules.setLabels': 'forwarding_rules',
        'compute.forwardingRules.aggregatedList': 'forwarding_rules_aggregated',
        'compute.regionHealthCheckServices.list': 'health_check_services',
        'compute.regionHealthCheckServices.insert': 'health_check_services',
        'compute.regionHealthCheckServices.get': 'health_check_services',
        'compute.regionHealthCheckServices.delete': 'health_check_services',
        'compute.regionHealthCheckServices.patch': 'health_check_services',
        'compute.regionHealthChecks.list': 'health_checks',
        'compute.regionHealthChecks.insert': 'health_checks',
        'compute.regionHealthChecks.get': 'health_checks',
        'compute.regionHealthChecks.delete': 'health_checks',
        'compute.regionHealthChecks.update': 'health_checks',
        'compute.regionHealthChecks.patch': 'health_checks',
        'compute.regionInstanceTemplates.list': 'instance_templates',
        'compute.regionInstanceTemplates.insert': 'instance_templates',
        'compute.regionInstanceTemplates.get': 'instance_templates',
        'compute.regionInstanceTemplates.delete': 'instance_templates',
        'compute.regionInstantSnapshots.list': 'instant_snapshots',
        'compute.regionInstantSnapshots.insert': 'instant_snapshots',
        'compute.regionInstantSnapshots.get': 'instant_snapshots',
        'compute.regionInstantSnapshots.delete': 'instant_snapshots',
        'compute.regionInstantSnapshots.setLabels': 'instant_snapshots',
        'compute.regionInstantSnapshots.getIamPolicy': 'instant_snapshots_iam_policies',
        'compute.regionInstantSnapshots.setIamPolicy': 'instant_snapshots_iam_policies',
        'compute.regionInstantSnapshots.testIamPermissions': 'instant_snapshots_iam_policies',
        'compute.globalNetworkEndpointGroups.list': 'network_endpoint_groups',
        'compute.globalNetworkEndpointGroups.insert': 'network_endpoint_groups',
        'compute.globalNetworkEndpointGroups.get': 'network_endpoint_groups',
        'compute.globalNetworkEndpointGroups.delete': 'network_endpoint_groups',
        'compute.globalNetworkEndpointGroups.attachNetworkEndpoints': 'network_endpoint_groups',
        'compute.globalNetworkEndpointGroups.detachNetworkEndpoints': 'network_endpoint_groups',
        'compute.regionNetworkEndpointGroups.list': 'network_endpoint_groups',
        'compute.regionNetworkEndpointGroups.insert': 'network_endpoint_groups',
        'compute.regionNetworkEndpointGroups.get': 'network_endpoint_groups',
        'compute.regionNetworkEndpointGroups.delete': 'network_endpoint_groups',
        'compute.regionNetworkEndpointGroups.attachNetworkEndpoints': 'network_endpoint_groups',
        'compute.regionNetworkEndpointGroups.detachNetworkEndpoints': 'network_endpoint_groups',
        'compute.networkEndpointGroups.listNetworkEndpoints': 'network_endpoints',
        'compute.regionNetworkEndpointGroups.listNetworkEndpoints': 'network_endpoints',
        'compute.globalNetworkEndpointGroups.listNetworkEndpoints': 'network_endpoints',
        'compute.regionNotificationEndpoints.list': 'notification_endpoints',
        'compute.regionNotificationEndpoints.insert': 'notification_endpoints',
        'compute.regionNotificationEndpoints.get': 'notification_endpoints',
        'compute.regionNotificationEndpoints.delete': 'notification_endpoints',
        'compute.projects.getXpnHost': 'xpn_hosts',
        'compute.globalPublicDelegatedPrefixes.list': 'public_delegated_prefixes',
        'compute.globalPublicDelegatedPrefixes.insert': 'public_delegated_prefixes',
        'compute.globalPublicDelegatedPrefixes.get': 'public_delegated_prefixes',
        'compute.globalPublicDelegatedPrefixes.delete': 'public_delegated_prefixes',
        'compute.globalPublicDelegatedPrefixes.patch': 'public_delegated_prefixes',
        'compute.publicDelegatedPrefixes.aggregatedList': 'public_delegated_prefixes_aggregated',
        'compute.routers.updateRoutePolicy': 'route_policies',
        'compute.routers.deleteRoutePolicy': 'route_policies',
        'compute.routers.getRoutePolicy': 'route_policies',
        'compute.routers.listRoutePolicies': 'route_policies',
        'compute.regionSslCertificates.list': 'ssl_certificates',
        'compute.regionSslCertificates.insert': 'ssl_certificates',
        'compute.regionSslCertificates.get': 'ssl_certificates',
        'compute.regionSslCertificates.delete': 'ssl_certificates',
        'compute.regionSslPolicies.list': 'ssl_policies',
        'compute.regionSslPolicies.insert': 'ssl_policies',
        'compute.regionSslPolicies.get': 'ssl_policies',
        'compute.regionSslPolicies.delete': 'ssl_policies',
        'compute.regionSslPolicies.patch': 'ssl_policies',
        'compute.regionSslPolicies.listAvailableFeatures': 'ssl_policies_available_features',
        'compute.regionTargetHttpProxies.list': 'target_http_proxies',
        'compute.regionTargetHttpProxies.insert': 'target_http_proxies',
        'compute.regionTargetHttpProxies.get': 'target_http_proxies',
        'compute.regionTargetHttpProxies.get': 'target_http_proxies',
        'compute.regionTargetHttpProxies.get': 'target_http_proxies',
        'compute.regionTargetHttpProxies.delete': 'target_http_proxies',
        'compute.regionTargetHttpProxies.setUrlMap': 'target_http_proxies',
        'compute.regionTargetHttpsProxies.list': 'target_https_proxies',
        'compute.regionTargetHttpsProxies.insert': 'target_https_proxies',
        'compute.regionTargetHttpsProxies.get': 'target_https_proxies',
        'compute.regionTargetHttpsProxies.get': 'target_https_proxies',
        'compute.regionTargetHttpsProxies.get': 'target_https_proxies',
        'compute.regionTargetHttpsProxies.get': 'target_https_proxies',
        'compute.regionTargetHttpsProxies.delete': 'target_https_proxies',
        'compute.regionTargetHttpsProxies.patch': 'target_https_proxies',
        'compute.regionTargetHttpsProxies.setUrlMap': 'target_https_proxies',
        'compute.regionTargetHttpsProxies.setSslCertificates': 'target_https_proxies',
        'compute.regionTargetTcpProxies.list': 'target_tcp_proxies',
        'compute.regionTargetTcpProxies.insert': 'target_tcp_proxies',
        'compute.regionTargetTcpProxies.get': 'target_tcp_proxies',
        'compute.regionTargetTcpProxies.get': 'target_tcp_proxies',
        'compute.regionTargetTcpProxies.get': 'target_tcp_proxies',
        'compute.regionTargetTcpProxies.delete': 'target_tcp_proxies',
        'compute.regionUrlMaps.list': 'url_maps',
        'compute.regionUrlMaps.insert': 'url_maps',
        'compute.regionUrlMaps.get': 'url_maps',
        'compute.regionUrlMaps.delete': 'url_maps',
        'compute.regionUrlMaps.update': 'url_maps',
        'compute.regionUrlMaps.patch': 'url_maps',
        'compute.regionUrlMaps.validate': 'url_maps',
        'compute.regionZones.list': 'zones',
        'compute.targetPools.getHealth': 'target_pools_health_check',
        'compute.routers.getRouterStatus': 'router_status',
        'compute.routers.getNatMappingInfo': 'router_nat_mapping_info',
        'compute.routers.getNatIpInfo': 'router_nat_ip_info',
        'compute.routers.listBgpRoutes': 'router_bgp_routes',        
    },
    config: {
        'config.projects.locations.deployments.deleteState': 'deployments'
    },
    connectors: {
        'connectors.projects.locations.connections.entityTypes.entities.deleteEntitiesWithConditions': 'entities',
        'connectors.projects.locations.connections.entityTypes.entities.updateEntitiesWithConditions': 'entities',
    },
    contactcenterinsights: {
        'contactcenterinsights.projects.locations.listAllFeedbackLabels': 'feedback_labels',
        'contactcenterinsights.projects.locations.datasets.listAllFeedbackLabels': 'feedback_labels',
        'contactcenterinsights.projects.locations.datasets.insightsdata.export': 'datasets',
    },
    container: {
        'container.projects.locations.clusters.fetchClusterUpgradeInfo': 'cluster_upgrade_info',
        'container.projects.zones.clusters.fetchClusterUpgradeInfo': 'cluster_upgrade_info',
        'container.projects.locations.clusters.updateMaster': 'clusters',
        'container.projects.zones.clusters.addons': 'clusters',
        'container.projects.locations.clusters.nodePools.fetchNodePoolUpgradeInfo': 'node_pool_upgrade_info',
        'container.projects.zones.clusters.nodePools.fetchNodePoolUpgradeInfo': 'node_pool_upgrade_info',
        'container.projects.zones.getServerConfig': 'server_config',
    },
    containeranalysis: {
        'containeranalysis.projects.locations.occurrences.getVulnerabilitySummary': 'vulnerability_summary',
        'containeranalysis.projects.occurrences.getVulnerabilitySummary': 'vulnerability_summary',
    },
    contentwarehouse: {
        'contentwarehouse.projects.fetchAcl': 'acls',
        'contentwarehouse.projects.locations.documents.fetchAcl': 'acls',
    },
    cloudbuild : {
        'cloudbuild.projects.locations.bitbucketServerConfigs.repos.list' : 'bitbucket_repos',
        'cloudbuild.projects.locations.gitLabConfigs.repos.list' : 'gitlab_repos',
    },
    dataform: {
        'dataform.projects.locations.repositories.workspaces.removeDirectory': 'workspaces',
        'dataform.projects.locations.repositories.workspaces.removeFile': 'workspaces',
    },
    datalabeling: {
        'datalabeling.projects.datasets.evaluations.exampleComparisons.search': 'evaluations',
        'datalabeling.projects.datasets.image.label': 'datasets',
        'datalabeling.projects.datasets.text.label': 'datasets',
        'datalabeling.projects.datasets.video.label': 'datasets',
    },
    datamigration: {
        'datamigration.projects.locations.migrationJobs.fetchSourceObjects': 'migration_jobs',
    },
    developerconnect: {
        'developerconnect.projects.locations.connections.fetchGitHubInstallations': 'github_installations',
        'developerconnect.projects.locations.connections.fetchLinkableGitRepositories': 'linkable_git_repositories',
    },
    discoveryengine: {
        'discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.operations.list' : 'search_engine_operations',
        'discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.operations.get' : 'target_site_operations',
        'discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.operations.list' : 'target_site_operations',
        'discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.operations.get' : 'search_engine_operations',
        'discoveryengine.projects.locations.collections.dataStores.operations.get' : 'data_store_operations',
    },
    firestore: {
        'firestore.projects.databases.documents.createDocument' : 'documents',
        'firestore.projects.databases.documents.listen' : 'documents',
        'firestore.projects.databases.documents.listDocuments' : 'documents',
    },
    healthcare: {
        'healthcare.projects.locations.datasets.hl7V2Stores.getHL7v2StoreMetrics': 'hl7_v2_store_metrics',
        'healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveInstance':	'instances',
        'healthcare.projects.locations.datasets.fhirStores.operations.delete-fhir-operation': 'operations',
        'healthcare.projects.locations.datasets.fhirStores.operations.get-fhir-operation-status': 'fhir_operation_status',
        'healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveSeries':  'series',
        'healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.getSeriesMetrics': 'series_metrics',
        'healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.getStudyMetrics': 'study_metrics',
        'healthcare.projects.locations.datasets.consentStores.consents.deleteRevision': 'consents_revisions',
        'healthcare.projects.locations.datasets.dicomStores.getDICOMStoreMetrics': 'dicom_store_metrics',
        'healthcare.projects.locations.datasets.dicomStores.studies.series.instances.bulkdata.retrieveBulkdata': 'dicom_stores',
        'healthcare.projects.locations.datasets.fhirStores.getFHIRStoreMetrics': 'fhir_store_metrics',
        'healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveFrames': 'dicom_stores',
        'healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveRendered': 'dicom_stores',
        'healthcare.projects.locations.datasets.hl7V2Stores.getHL7v2StoreMetrics': 'hl7_v2_store_metrics',
    },
    iamcredentials: {
        'iamcredentials.projects.serviceAccounts.getAllowedLocations': 'allowed_locations',
        'iamcredentials.locations.workforcePools.getAllowedLocations': 'allowed_locations',
        'iamcredentials.projects.locations.workloadIdentityPools.getAllowedLocations': 'allowed_locations'
    },
    iamv2: {
        'iam.policies.listPolicies' : 'policies',
        'iam.policies.createPolicy' : 'policies',
    },
    iamv2beta: {
        'iam.policies.listPolicies' : 'policies',
        'iam.policies.createPolicy' : 'policies',
    },
    iam: {
        'iam.projects.locations.oauthClients.credentials.list' : 'oauth_client_credentials',
        'iam.projects.locations.oauthClients.credentials.create' : 'oauth_client_credentials',
        'iam.projects.locations.oauthClients.credentials.get' : 'oauth_client_credentials',
        'iam.projects.locations.oauthClients.credentials.patch' : 'oauth_client_credentials',
        'iam.projects.locations.oauthClients.credentials.delete' : 'oauth_client_credentials',
        'iam.projects.locations.workloadIdentityPools.providers.list' : 'workload_identity_pool_providers',
        'iam.projects.locations.workloadIdentityPools.providers.create' : 'workload_identity_pool_providers',
        'iam.projects.locations.workloadIdentityPools.providers.get' : 'workload_identity_pool_providers',
        'iam.projects.locations.workloadIdentityPools.providers.patch' : 'workload_identity_pool_providers',
        'iam.projects.locations.workloadIdentityPools.providers.delete' : 'workload_identity_pool_providers',
        'iam.projects.locations.workloadIdentityPools.providers.undelete' : 'workload_identity_pool_providers',
        'iam.projects.locations.workloadIdentityPools.providers.keys.list' : 'workload_identity_pool_provider_keys',
        'iam.projects.locations.workloadIdentityPools.providers.keys.create' : 'workload_identity_pool_provider_keys',
        'iam.projects.locations.workloadIdentityPools.providers.keys.get' : 'workload_identity_pool_provider_keys',
        'iam.projects.locations.workloadIdentityPools.providers.keys.delete' : 'workload_identity_pool_provider_keys',
        'iam.projects.locations.workloadIdentityPools.providers.keys.undelete' : 'workload_identity_pool_provider_keys',
        'iam.projects.serviceAccounts.keys.list' : 'service_account_keys',
        'iam.projects.serviceAccounts.keys.create' : 'service_account_keys',
        'iam.projects.serviceAccounts.keys.get' : 'service_account_keys',
        'iam.projects.serviceAccounts.keys.delete' : 'service_account_keys',
        'iam.projects.serviceAccounts.keys.upload' : 'service_account_keys',
        'iam.projects.serviceAccounts.keys.disable' : 'service_account_keys',
        'iam.projects.serviceAccounts.keys.enable' : 'service_account_keys',
        'iam.locations.workforcePools.providers.list' : 'workforce_pool_providers',
        'iam.locations.workforcePools.providers.create' : 'workforce_pool_providers',
        'iam.locations.workforcePools.providers.get' : 'workforce_pool_providers',
        'iam.locations.workforcePools.providers.patch' : 'workforce_pool_providers',
        'iam.locations.workforcePools.providers.delete' : 'workforce_pool_providers',
        'iam.locations.workforcePools.providers.undelete' : 'workforce_pool_providers',
        'iam.locations.workforcePools.providers.keys.list' : 'workforce_pool_provider_keys',
        'iam.locations.workforcePools.providers.keys.create' : 'workforce_pool_provider_keys',
        'iam.locations.workforcePools.providers.keys.get' : 'workforce_pool_provider_keys',
        'iam.locations.workforcePools.providers.keys.delete' : 'workforce_pool_provider_keys',
        'iam.locations.workforcePools.providers.keys.undelete' : 'workforce_pool_provider_keys',
        'iam.locations.workforcePools.subjects.delete' : 'workforce_pool_subjects',
        'iam.locations.workforcePools.subjects.undelete' : 'workforce_pool_subjects',
        'iam.projects.locations.workloadIdentityPools.namespaces.managedIdentities.removeAttestationRule': 'managed_identities_attestation_rules',
        'iam.projects.locations.workloadIdentityPools.namespaces.managedIdentities.addAttestationRule': 'managed_identities_attestation_rules'
    },
    iap: {
        'iap.getIapSettings': 'iap_settings',
        'iap.updateIapSettings': 'iap_settings'
    },
    integrations: {
        'integrations.projects.locations.integrations.executeEvent' : 'skip_this_resource',
        'integrations.projects.locations.connections.getConnectionSchemaMetadata': 'connection_schema_metadata'
    },
    logging: {
        'logging.locations.get' : 'location',
    },
    networkconnectivity: {
        'networkconnectivity.projects.locations.global.hubs.listSpokes' : 'spokes',
    },
    osconfig: {
        'osconfig.projects.locations.instances.vulnerabilityReports.get' : 'vulnerability_report',
        'osconfig.projects.locations.instances.osPolicyAssignments.reports.get' : 'report',
        'osconfig.projects.locations.instances.inventories.get' : 'inventory',
    },   
    prod_tt_sasportal: {
        'prod_tt_sasportal.customers.nodes.get' : 'customer_node',
		'prod_tt_sasportal.customers.nodes.list' : 'customer_nodes',
		'prod_tt_sasportal.customers.nodes.nodes.list' : 'customer_nodes',
		'prod_tt_sasportal.customers.nodes.create' : 'customer_nodes',
		'prod_tt_sasportal.customers.nodes.nodes.create' : 'customer_nodes',
		'prod_tt_sasportal.customers.nodes.delete' : 'customer_nodes',
		'prod_tt_sasportal.nodes.get' : 'node',
		'prod_tt_sasportal.nodes.nodes.get' : 'node',	
		'prod_tt_sasportal.nodes.nodes.list' : 'nodes',
		'prod_tt_sasportal.nodes.nodes.nodes.list' : 'nodes',
		'prod_tt_sasportal.nodes.nodes.create' : 'nodes',
		'prod_tt_sasportal.nodes.nodes.nodes.create' : 'nodes',
		'prod_tt_sasportal.nodes.nodes.delete' : 'nodes',		
    },    
    sasportal: {
        'sasportal.customers.nodes.list' : 'customer_nodes',
		'sasportal.customers.nodes.get' : 'customer_nodes',
		'sasportal.customers.nodes.nodes.list' : 'customer_nodes',
		'sasportal.customers.nodes.nodes.create' : 'customer_nodes',
		'sasportal.customers.nodes.create' : 'customer_nodes',
		'sasportal.customers.nodes.delete' : 'customer_nodes',
        'sasportal.customers.nodes.get' : 'customer_node',
		'sasportal.nodes.get' : 'node',
		'sasportal.nodes.nodes.get' : 'node',
		'sasportal.nodes.nodes.nodes.list' : 'nodes',
		'sasportal.nodes.nodes.list' : 'nodes',
		'sasportal.nodes.nodes.nodes.create' : 'nodes',
		'sasportal.nodes.nodes.create' : 'nodes',
		'sasportal.nodes.nodes.delete' : 'nodes',
    },  
    securitycenter: {
        'securitycenter.projects.securityHealthAnalyticsSettings.customModules.list' : 'security_health_analytics_modules',
        'securitycenter.projects.securityHealthAnalyticsSettings.customModules.get' : 'security_health_analytics_modules',
        'securitycenter.organizations.securityHealthAnalyticsSettings.customModules.get' : 'security_health_analytics_modules',
        'securitycenter.folders.securityHealthAnalyticsSettings.customModules.get' : 'security_health_analytics_modules',
        'securitycenter.organizations.securityHealthAnalyticsSettings.customModules.list' : 'security_health_analytics_modules',
        'securitycenter.folders.securityHealthAnalyticsSettings.customModules.list' : 'security_health_analytics_modules',
        'securitycenter.projects.securityHealthAnalyticsSettings.customModules.create' : 'security_health_analytics_modules',
        'securitycenter.organizations.securityHealthAnalyticsSettings.customModules.create' : 'security_health_analytics_modules',
        'securitycenter.folders.securityHealthAnalyticsSettings.customModules.create' : 'security_health_analytics_modules',
        'securitycenter.projects.securityHealthAnalyticsSettings.customModules.delete' : 'security_health_analytics_modules',
        'securitycenter.organizations.securityHealthAnalyticsSettings.customModules.delete' : 'security_health_analytics_modules',
        'securitycenter.folders.securityHealthAnalyticsSettings.customModules.delete' : 'security_health_analytics_modules',
        'securitycenter.projects.eventThreatDetectionSettings.customModules.list' : 'event_threat_detection_modules',
        'securitycenter.organizations.eventThreatDetectionSettings.customModules.list' : 'event_threat_detection_modules',
        'securitycenter.folders.eventThreatDetectionSettings.customModules.list' : 'event_threat_detection_modules',
        'securitycenter.projects.eventThreatDetectionSettings.customModules.create' : 'event_threat_detection_modules',
        'securitycenter.organizations.eventThreatDetectionSettings.customModules.create' : 'event_threat_detection_modules',
        'securitycenter.folders.eventThreatDetectionSettings.customModules.create' : 'event_threat_detection_modules',
		'securitycenter.projects.eventThreatDetectionSettings.customModules.delete' : 'event_threat_detection_modules',
        'securitycenter.organizations.eventThreatDetectionSettings.customModules.delete' : 'event_threat_detection_modules',
        'securitycenter.folders.eventThreatDetectionSettings.customModules.delete' : 'event_threat_detection_modules',
    },    
    servicenetworking: {
        'servicenetworking.services.dnsRecordSets.get' : 'dns_record_set',
    },
    videointelligence: {
        'videointelligence.operations.projects.locations.operations.cancel' : 'long_running_operations',
        'videointelligence.operations.projects.locations.operations.delete' : 'long_running_operations',
        'videointelligence.operations.projects.locations.operations.get' : 'long_running_operations',
    },   
};

export const objectKeyByOperationId = {
    apigateway: {
        'apigateway.projects.locations.gateways.list' : '$.gateways',
        'apigateway.projects.locations.apis.list' : '$.apis',
        'apigateway.projects.locations.apis.configs.list' : '$.apiConfigs',
    },
    baremetalsolution: {
        'baremetalsolution.projects.locations.nfsShares.list' : '$.nfsShares',
        'baremetalsolution.projects.locations.networks.list' : '$.networks',
        'baremetalsolution.projects.locations.instances.list' : '$.instances',
        'baremetalsolution.projects.locations.volumes.list' : '$.volumes',
        'baremetalsolution.projects.locations.volumes.snapshots.list' : '$.volumeSnapshots',
        'baremetalsolution.projects.locations.volumes.luns.list' : '$.luns',
    },
    batch: {
        'batch.projects.locations.jobs.taskGroups.tasks.list' : '$.tasks',
        'batch.projects.locations.jobs.list' : '$.jobs',
    },
    beyondcorp: {
        'beyondcorp.projects.locations.appGateways.list' : '$.appGateways',
        'beyondcorp.projects.locations.appConnectors.list' : '$.appConnectors',
        'beyondcorp.projects.locations.appConnections.list' : '$.appConnections',
    },
    bigtableadmin: {
        'bigtableadmin.projects.instances.list' : '$.instances',
        'bigtableadmin.projects.instances.clusters.list' : '$.clusters',
        'bigtableadmin.projects.instances.appProfiles.list' : '$.appProfiles',
    },
    blockchainnodeengine: {
        'blockchainnodeengine.projects.locations.blockchainNodes.list' : '$.blockchainNodes',
    },
    certificatemanager: {
        'certificatemanager.projects.locations.trustConfigs.list' : '$.trustConfigs',
        'certificatemanager.projects.locations.dnsAuthorizations.list' : '$.dnsAuthorizations',
        'certificatemanager.projects.locations.certificateIssuanceConfigs.list' : '$.certificateIssuanceConfigs',
        'certificatemanager.projects.locations.certificateMaps.certificateMapEntries.list' : '$.certificateMapEntries',
        'certificatemanager.projects.locations.certificateMaps.list' : '$.certificateMaps',
        'certificatemanager.projects.locations.certificates.list' : '$.certificates',
    },
    clouddeploy: {
        'clouddeploy.projects.locations.targets.list' : '$.targets',
        'clouddeploy.projects.locations.deliveryPipelines.releases.rollouts.jobRuns.list' : '$.jobRuns',
        'clouddeploy.projects.locations.deliveryPipelines.releases.rollouts.list' : '$.rollouts',
        'clouddeploy.projects.locations.deliveryPipelines.releases.list' : '$.releases',
        'clouddeploy.projects.locations.deliveryPipelines.list' : '$.deliveryPipelines',
    },
    cloudfunctions: {
        'cloudfunctions.projects.locations.functions.list' : '$.functions',
    },
    connectors: {
        'connectors.projects.locations.connections.actions.list' : '$.actions',
        'connectors.projects.locations.connections.entityTypes.list' : '$.types',
    },
    contactcenteraiplatform: {
        'contactcenteraiplatform.projects.locations.contactCenters.list' : '$.contactCenters',
    },
    container: {
        'container.projects.locations.clusters.list' : '$.clusters',
    },
    compute: {
        'compute.routers.getNatMappingInfo' : '$.result',
        'compute.projects.getXpnResources' : '$.resources',
        'compute.globalOperations.aggregatedList' : '$.items[*].operations[*]',
        'compute.regionCommitments.aggregatedList' : '$.items[*].commitments[*]',
    },
    dataflow: {
        'dataflow.projects.jobs.list' : '$.jobs',
        'dataflow.projects.jobs.messages.list' : '$.jobMessages',
        'dataflow.projects.locations.jobs.list' : '$.jobs',
        'dataflow.projects.locations.jobs.messages.list' : '$.jobMessages',
        'dataflow.projects.locations.jobs.getExecutionDetails' : '$.stages',
        'dataflow.projects.locations.jobs.stages.getExecutionDetails' : '$.workers',
    },
    dataform: {
        'dataform.projects.locations.repositories.compilationResults.list' : '$.compilationResults',
        'dataform.projects.locations.repositories.releaseConfigs.list' : '$.releaseConfigs',
        'dataform.projects.locations.repositories.workflowConfigs.list' : '$.workflowConfigs',
        'dataform.projects.locations.repositories.workflowInvocations.list' : '$.workflowInvocations',
        'dataform.projects.locations.repositories.workspaces.list' : '$.workspaces',
        'dataform.projects.locations.repositories.list' : '$.repositories',
    },
    datafusion: {
        'datafusion.projects.locations.instances.list' : '$.instances',
    },
    datamigration: {
        'datamigration.projects.locations.migrationJobs.list' : '$.migrationJobs',
        'datamigration.projects.locations.connectionProfiles.list' : '$.connectionProfiles',
        'datamigration.projects.locations.privateConnections.list' : '$.privateConnections',
        'datamigration.projects.locations.conversionWorkspaces.list' : '$.conversionWorkspaces',
    },
    dataplex: {
        'dataplex.projects.locations.dataScans.list' : '$.dataScans',
        'dataplex.projects.locations.dataTaxonomies.list' : '$.dataTaxonomies',
        'dataplex.projects.locations.dataTaxonomies.attributes.list' : '$.dataAttributes',
        'dataplex.projects.locations.dataAttributeBindings.list' : '$.dataAttributeBindings',
        'dataplex.projects.locations.lakes.tasks.list' : '$.tasks',
        'dataplex.projects.locations.lakes.list' : '$.lakes',
    },
    datastream: {
        'datastream.projects.locations.streams.list' : '$.streams',
        'datastream.projects.locations.connectionProfiles.list' : '$.connectionProfiles',
        'datastream.projects.locations.privateConnections.routes.list' : '$.routes',
        'datastream.projects.locations.privateConnections.list' : '$.privateConnections',
    },
    eventarc: {
        'eventarc.projects.locations.triggers.list' : '$.triggers',
        'eventarc.projects.locations.providers.list' : '$.providers',
        'eventarc.projects.locations.channelConnections.list' : '$.channelConnections',
        'eventarc.projects.locations.channels.list' : '$.channels',
    },
    file: {
        'file.projects.locations.instances.list' : '$.instances',
        'file.projects.locations.backups.list' : '$.backups',
    },
    gkebackup: {
        'gkebackup.projects.locations.backupPlans.list' : '$.backupPlans',
        'gkebackup.projects.locations.restorePlans.list' : '$.restorePlans',
        'gkebackup.projects.locations.restorePlans.restores.list' : '$.restores',
    },
    gkehub: {
        'gkehub.projects.locations.memberships.list' : '$.resources',
    },
    gkeonprem: {
        'gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.list' : '$.vmwareNodePools',
        'gkeonprem.projects.locations.vmwareClusters.list' : '$.vmwareClusters',
        'gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.list' : '$.bareMetalNodePools',
        'gkeonprem.projects.locations.bareMetalClusters.list' : '$.bareMetalClusters',
        'gkeonprem.projects.locations.vmwareAdminClusters.list' : '$.vmwareAdminClusters',
        'gkeonprem.projects.locations.bareMetalAdminClusters.list' : '$.bareMetalAdminClusters',
    },
    iam: {
        'iam.projects.serviceAccounts.keys.list' : '$.keys',
    },
    ids: {
        'ids.projects.locations.endpoints.list' : '$.endpoints',
    },
    integrations: {
        'integrations.projects.locations.integrations.executions.list' : '$.executions',
        'integrations.projects.locations.products.integrations.executions.list' : '$.executions',
    },
    managedidentities: {
        'managedidentities.projects.locations.global.peerings.list' : '$.peerings',
        'managedidentities.projects.locations.global.domains.list' : '$.domains',
        'managedidentities.projects.locations.global.domains.backups.list' : '$.backups',
        'managedidentities.projects.locations.global.domains.sqlIntegrations.list' : '$.sqlIntegrations',
    },
    memcache: {
        'memcache.projects.locations.instances.list' : '$.instances',
    },
    metastore: {
        'metastore.projects.locations.federations.list' : '$.federations',
        'metastore.projects.locations.services.list' : '$.services',
        'metastore.projects.locations.services.metadataImports.list' : '$.metadataImports',
        'metastore.projects.locations.services.backups.list' : '$.backups',
    },
    migrationcenter: {
        'migrationcenter.projects.locations.importJobs.importDataFiles.list' : '$.importDataFiles',
        'migrationcenter.projects.locations.importJobs.list' : '$.importJobs',
        'migrationcenter.projects.locations.assets.list' : '$.assets',
        'migrationcenter.projects.locations.reportConfigs.reports.list' : '$.reports',
        'migrationcenter.projects.locations.reportConfigs.list' : '$.reportConfigs',
        'migrationcenter.projects.locations.sources.list' : '$.sources',
        'migrationcenter.projects.locations.sources.errorFrames.list' : '$.errorFrames',
        'migrationcenter.projects.locations.groups.list' : '$.groups',
        'migrationcenter.projects.locations.preferenceSets.list' : '$.preferenceSets',
    },
    monitoring: {
        'monitoring.organizations.timeSeries.list' : '$.timeSeries',
        'monitoring.projects.timeSeries.list' : '$.timeSeries',
        'monitoring.folders.timeSeries.list' : '$.timeSeries',        
    },
    networkconnectivity: {
        'networkconnectivity.projects.locations.global.policyBasedRoutes.list' : '$.policyBasedRoutes',
        'networkconnectivity.projects.locations.serviceClasses.list' : '$.serviceClasses',
        'networkconnectivity.projects.locations.spokes.list' : '$.spokes',
        'networkconnectivity.projects.locations.global.hubs.groups.list' : '$.groups',
        'networkconnectivity.projects.locations.global.hubs.routeTables.list' : '$.routeTables',
        'networkconnectivity.projects.locations.global.hubs.routeTables.routes.list' : '$.routes',
        'networkconnectivity.projects.locations.global.hubs.listSpokes' : '$.spokes',
        'networkconnectivity.projects.locations.global.hubs.list' : '$.hubs',
        'networkconnectivity.projects.locations.serviceConnectionTokens.list' : '$.serviceConnectionTokens',
        'networkconnectivity.projects.locations.internalRanges.list' : '$.internalRanges',
        'networkconnectivity.projects.locations.serviceConnectionMaps.list' : '$.serviceConnectionMaps',
        'networkconnectivity.projects.locations.serviceConnectionPolicies.list' : '$.serviceConnectionPolicies',
    },
    networkmanagement: {
        'networkmanagement.projects.locations.global.connectivityTests.list' : '$.resources',
    },
    networksecurity: {
        'networksecurity.projects.locations.gatewaySecurityPolicies.rules.list' : '$.gatewaySecurityPolicyRules',
        'networksecurity.projects.locations.gatewaySecurityPolicies.list' : '$.gatewaySecurityPolicies',
        'networksecurity.projects.locations.tlsInspectionPolicies.list' : '$.tlsInspectionPolicies',
        'networksecurity.projects.locations.urlLists.list' : '$.urlLists',
    },
    networkservices: {
        'networkservices.projects.locations.gateways.list' : '$.gateways',
    }, 
    notebooks: {
        'notebooks.projects.locations.instances.list' : '$.instances',
    },
    privateca: {
        'privateca.projects.locations.caPools.certificates.list' : '$.certificates',
        'privateca.projects.locations.caPools.certificateAuthorities.list' : '$.certificateAuthorities',
        'privateca.projects.locations.caPools.certificateAuthorities.certificateRevocationLists.list' : '$.certificateRevocationLists',
        'privateca.projects.locations.caPools.list' : '$.caPools',
        'privateca.projects.locations.certificateTemplates.list' : '$.certificateTemplates',
    },
    redis: {
        'redis.projects.locations.instances.list' : '$.instances',
    },
    spanner: {
        'spanner.projects.instances.list' : '$.instances',
    },
    sql: {
        'sql.instances.list' : '$.items',
    },
    storage: {
        'storage.objects.list' : '$.items',
    },
    tpu: {
        'tpu.projects.locations.runtimeVersions.list' : '$.runtimeVersions',
        'tpu.projects.locations.acceleratorTypes.list' : '$.acceleratorTypes',
        'tpu.projects.locations.nodes.list' : '$.nodes',
    },
    transcoder: {
        'transcoder.projects.locations.jobs.list' : '$.jobs',
        'transcoder.projects.locations.jobTemplates.list' : '$.jobTemplates',
    },
    vmmigration: {
        'vmmigration.projects.locations.groups.list' : '$.groups',
        'vmmigration.projects.locations.targetProjects.list' : '$.targetProjects',
        'vmmigration.projects.locations.sources.list' : '$.sources',
        'vmmigration.projects.locations.sources.migratingVms.cutoverJobs.list' : '$.cutoverJobs',
        'vmmigration.projects.locations.sources.migratingVms.replicationCycles.list' : '$.replicationCycles',
        'vmmigration.projects.locations.sources.migratingVms.cloneJobs.list' : '$.cloneJobs',
        'vmmigration.projects.locations.sources.migratingVms.list' : '$.migratingVms',
        'vmmigration.projects.locations.sources.datacenterConnectors.list' : '$.datacenterConnectors',
        'vmmigration.projects.locations.sources.utilizationReports.list' : '$.utilizationReports',
    },
    workflows: {
        'workflows.projects.locations.workflows.list' : '$.workflows',
    },
    workloadmanager: {
        'workloadmanager.projects.locations.evaluations.executions.list' : '$.executions',
        'workloadmanager.projects.locations.evaluations.list' : '$.evaluations',
    },
    workstations: {
        'workstations.projects.locations.workstationClusters.list' : '$.workstationClusters',
        'workstations.projects.locations.workstationClusters.workstationConfigs.list' : '$.workstationConfigs',
        'workstations.projects.locations.workstationClusters.workstationConfigs.listUsable' : '$.workstationConfigs',
        'workstations.projects.locations.workstationClusters.workstationConfigs.workstations.list' : '$.workstations',
        'workstations.projects.locations.workstationClusters.workstationConfigs.workstations.listUsable' : '$.workstations',
    },
};

export const resourceNameOverridesByResourceName = {
    contactcenteraiplatform: {
        'contact_centers_authentication-config' : 'authentication_config',
    },
    container: {
        'well-known_openid-configuration' : 'well_known_openid_configuration',
    }
};

export const sqlVerbOverrides = {
    aiplatform: {
        'aiplatform.projects.locations.metadataStores.contexts.addContextArtifactsAndExecutions': 'exec',
        'aiplatform.projects.locations.metadataStores.contexts.addContextChildren': 'exec',
        'aiplatform.projects.locations.metadataStores.contexts.removeContextChildren': 'exec',
        'aiplatform.endpoints.fetchPredictOperation': 'exec',
        'aiplatform.projects.locations.featurestores.entityTypes.deleteFeatureValues': 'exec',
        'aiplatform.projects.locations.metadataStores.executions.addExecutionEvents': 'exec',
        'aiplatform.projects.locations.featureOnlineStores.featureViews.fetchFeatureValues': 'exec',
        'aiplatform.projects.locations.indexes.removeDatapoints': 'exec',
        'aiplatform.projects.locations.models.updateExplanationDataset': 'exec',
        'aiplatform.publishers.models.fetchPredictOperation': 'exec',
        'aiplatform.projects.locations.studies.trials.addTrialMeasurement': 'exec',
    },
    apigee: {
        'apigee.organizations.appgroups.apps.keys.apiproducts.updateAppGroupAppKeyApiProduct': 'exec',
        'apigee.organizations.developers.apps.keys.apiproducts.updateDeveloperAppKeyApiProduct': 'exec',
        'apigee.organizations.apiproducts.attributes.updateApiProductAttribute': 'exec',
        'apigee.organizations.developers.apps.attributes.updateDeveloperAppAttribute': 'exec',
        'apigee.organizations.developers.attributes.updateDeveloperAttribute': 'exec',
        'apigee.organizations.environments.apis.revisions.debugsessions.deleteData': 'exec',
        'apigee.organizations.appgroups.apps.keys.updateAppGroupAppKey': 'exec',
        'apigee.organizations.developers.apps.keys.updateDeveloperAppKey': 'exec',
        'apigee.organizations.developers.apps.keys.create.create': 'exec',
    },
    appengine: {
        'appengine.projects.locations.applications.patch': 'exec',
    },
    backupdr: {
        'backupdr.projects.locations.backupPlanAssociations.fetchForResourceType': 'exec',
        'backupdr.projects.locations.backupVaults.dataSources.fetchAccessToken': 'exec',
    },
    cloudkms: {
        'cloudkms.projects.locations.keyRings.cryptoKeys.updatePrimaryVersion': 'exec',
    },
    cloudprofiler: {
        'cloudprofiler.projects.profiles.createOffline': 'exec',
    },
    compute: {
        'compute.regionDisks.bulkInsert': 'exec',
        'compute.instances.updateDisplayDevice': 'exec',
        'compute.regionInstances.bulkInsert': 'exec',
        'compute.instances.updateNetworkInterface': 'exec',
        'compute.instances.updateShieldedInstanceConfig': 'exec',
        'compute.backendBuckets.addSignedUrlKey': 'exec',
        'compute.backendBuckets.deleteSignedUrlKey': 'exec',
        'compute.backendServices.addSignedUrlKey': 'exec',
        'compute.backendServices.deleteSignedUrlKey': 'exec',
        'compute.disks.bulkInsert': 'exec',
        'compute.instances.bulkInsert': 'exec',
    },
    config: {
        'config.projects.locations.deployments.deleteState': 'exec'
    },
    container: {
        'container.projects.locations.clusters.updateMaster': 'exec',
        'container.projects.zones.clusters.addons': 'exec',
    },    
    cloudbuild: {
        // 'cloudbuild.projects.locations.gitLabConfigs.removeGitLabConnectedRepository' : 'exec',
        // 'cloudbuild.projects.locations.bitbucketServerConfigs.removeBitbucketServerConnectedRepository' : 'exec',
    },
    dataform: {
        'dataform.projects.locations.repositories.workspaces.removeDirectory': 'exec',
        'dataform.projects.locations.repositories.workspaces.removeFile': 'exec',
    },
    datamigration: {
        'datamigration.projects.locations.migrationJobs.fetchSourceObjects': 'exec',
    },
    documentai: {
        // 'documentai.projects.locations.fetchProcessorTypes' : 'exec',        
    },
    healthcare: {
        'healthcare.projects.locations.datasets.fhirStores.operations.delete-fhir-operation': 'exec',
        'healthcare.projects.locations.datasets.dicomStores.studies.series.instances.bulkdata.retrieveBulkdata': 'exec',
        'healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveFrames': 'exec',
        'healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveRendered': 'exec',
    },
    identitytoolkit: {
        'identitytoolkit.relyingparty.getPublicKeys' : 'exec',
    },
    logging: {
        // 'logging.locations.operations.list' : 'exec',
    },
    osconfig: {
        'osconfig.projects.locations.instances.inventories.get' : 'exec',
    },
    spanner: {
        'spanner.projects.instances.databases.dropDatabase' : 'delete',
    },
};

export const methodNameOverrides = {
    iam: {
        'iam.projects.locations.workloadIdentityPools.operations.get' : 'get_workload_identity_pool_operations',
        'iam.projects.locations.workloadIdentityPools.namespaces.operations.get' : 'get_workload_identity_pool_namespace_operations',
        'iam.projects.locations.workloadIdentityPools.namespaces.managedIdentities.operations.get' : 'get_workload_identity_pool_namespace_managed_identity_operations',
        'iam.projects.locations.workloadIdentityPools.namespaces.managedIdentities.workloadSources.operations.get' : 'get_workload_identity_pool_namespace_managed_identity_workload_source_operations',
        'iam.projects.locations.workloadIdentityPools.providers.operations.get' : 'get_workload_identity_pool_provider_operations',
        'iam.projects.locations.workloadIdentityPools.providers.keys.operations.get' : 'get_workload_identity_pool_provider_key_operations',
        'iam.locations.workforcePools.operations.get' : 'get_workforce_pool_operations',
        'iam.locations.workforcePools.providers.operations.get' : 'get_workforce_pool_provider_operations',
        'iam.locations.workforcePools.providers.keys.operations.get' : 'get_workforce_pool_provider_key_operations',
        'iam.locations.workforcePools.subjects.operations.get' : 'get_workforce_pool_subject_operations',
        'iam.projects.roles.list' : 'list_project_roles',
        'iam.projects.roles.create' : 'create_project_roles',
        'iam.projects.roles.get' : 'get_project_roles',
        'iam.projects.roles.patch' : 'patch_project_roles',
        'iam.projects.roles.delete' : 'delete_project_roles',
        'iam.projects.roles.undelete' : 'undelete_project_roles',
        'iam.organizations.roles.list' : 'list_org_roles',
        'iam.organizations.roles.create' : 'create_org_roles',
        'iam.organizations.roles.get' : 'get_org_roles',
        'iam.organizations.roles.patch' : 'patch_org_roles',
        'iam.organizations.roles.delete' : 'delete_org_roles',
        'iam.organizations.roles.undelete' : 'undelete_org_roles'
    },
    healthcare: {
        'healthcare.projects.locations.datasets.fhirStores.operations.delete-fhir-operation': 'delete-fhir-operation',
        'healthcare.projects.locations.datasets.fhirStores.operations.get-fhir-operation-status': 'get-fhir-operation-status'
    },
};
